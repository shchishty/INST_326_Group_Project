class Caregiver:
    def __init__(self, name, phone, email, pay_rate, hours=0):
        self.name = name
        self.phone = phone
        self.email = email
        self.pay_rate = pay_rate
        self.hours = hours
        self.availability = {day: {'AM': 'available', 'PM': 'available'} for day in ["Monday", "Tuesday", "Wednesday", "Thursday", "Friday", "Saturday", "Sunday"]}
    def set_availability(self, day, shift, status):
        if day in self.availability and shift in self.availability[day]:
            self.availability[day][shift] = status
    def display_availability(self):
        print(f"Availability for caregiver: {self.name}:")
        for day, shifts in self.availability.items():
            print(f"{day}: AM - {shifts['AM']}, PM - {shifts['PM']}")

    def calculate_weekly_pay(self):
        return self.hours * self.pay_rate
class Manager:
    def __init__(self):
        self.caregivers = []
    
    def add_caregiver(self, caregiver):
        self.caregivers.append(caregiver)
    
    def display_all_caregivers(self):
        print("Caregivers:")
        for caregiver in self.caregivers:
            print(f"Name: {caregiver.name}, Phone: {caregiver.phone}, Email: {caregiver.email}, "
                  f"Pay Rate: {caregiver.pay_rate}, Hours: {caregiver.hours}")
    def display_schedules(self):
        for caregiver in self.caregivers:
            caregiver.display_availability()

 def generate_pay_report(self):
        total_weekly_pay = 0
        total_monthly_pay = 0
        report_lines = ["Pay Report:"]
        for caregiver in self.caregivers:
            weekly_pay = caregiver.calculate_weekly_pay()
            monthly_pay = weekly_pay * 4  # Assuming 4 weeks in a month
            total_weekly_pay += weekly_pay
            total_monthly_pay += monthly_pay
            report_lines.append(
                f"{caregiver.name}: Weekly Pay: ${weekly_pay:.2f}, Monthly Pay: ${monthly_pay:.2f}"
            )
        report_lines.append(f"\nTotal Weekly Pay: ${total_weekly_pay:.2f}")
        report_lines.append(f"Total Monthly Pay: ${total_monthly_pay:.2f}")
        
        # Write the report to a text file
        with open("pay_report.txt", "w") as file:
            file.write("\n".join(report_lines))
        print("\n".join(report_lines))
        print("\nPay report saved to 'pay_report.txt'")
    #example usage
if __name__ == "__main__":
    mary = Caregiver("Mary", "240-675-3880", "maryhadalamb@gmail.com", 20.0, 35)
    jenn = Caregiver("Jenn", "301-274-8921", "jenniferrocks@yahoo.com", 20.0, 30)
    mary.set_availability(4, 'AM', 'available') 
    mary.set_availability(4, 'PM', 'unavailable')  
    jenn.set_availability(2, 'AM', 'unavailable')  
    jenn.set_availability(1, 'PM', 'available')

    manager = Manager()
    manager.add_caregiver(mary)
    manager.add_caregiver(jenn)
    
    manager.display_all_caregivers()
    print("\nSchedules:")
    manager.display_schedules()

    print("\nGenerating Pay Report:")
    manager.generate_pay_report()
